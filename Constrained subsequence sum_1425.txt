//https://leetcode.com/problems/constrained-subsequence-sum/?envType=daily-question&envId=2023-10-21



class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        // ArrayDeque<Integer> deque = new ArrayDeque();
        // int[]sum = new int[nums.length];
        // int res = nums[0];
        // for(int i = 0; i< nums.length; i++){
        //     sum[i] = nums[i];

        //     if(!deque.isEmpty()){
        //         sum[i] += sum[deque.peekFirst()];
        //     }
        //     res = Math.max(res, sum[i]);

        //     if(!deque.isEmpty() && i - deque.peekFirst() >= k){
        //         deque.pollFirst();
        //     }
        //     while(!deque.isEmpty() && sum[i] > sum[deque.peekLast()]){
        //         deque.pollLast();
        //     }
        //     if(sum[i] > 0){
        //         deque.offerLast(i);
        //     }
        // }
        // return res;

        int n = nums.length;
        int[] dp = new int[n];
        Deque<Integer> dq = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            int max = dq.isEmpty() ? 0 : dp[dq.peekFirst()];
            dp[i] = Math.max(max + nums[i], nums[i]);

            while (!dq.isEmpty() && dp[i] > dp[dq.peekLast()]) {
                dq.pollLast();
            }

            if (dp[i] > 0) {
                dq.offerLast(i);
            }

            if (!dq.isEmpty() && dq.peekFirst() == i - k) {
                dq.pollFirst();
            }
        }

        int res = Integer.MIN_VALUE;
        for (int val : dp) {
            res = Math.max(res, val);
        }

        return res;
    }
}